{"ast":null,"code":"import { base_url } from \"../../constants\";\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const GET_CART_DETAILS = \"GET_CART_DETAILS\";\nexport const UPDATE_CART = \"UPDATE_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const addToCart = (token, cartItem) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/add\"), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        body: JSON.stringify(cartItem),\n        method: \"POST\"\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 201) {\n        dispatch({\n          type: ADD_TO_CART,\n          cartItem: cartItem\n        });\n      }\n\n      return jsonResposne;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getCartItems = (token, userId) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/user/\").concat(userId), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        method: \"POST\"\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 200) {\n        dispatch({\n          type: GET_CART_DETAILS,\n          cartItems: jsonResposne.message[0]\n        });\n      }\n\n      return jsonResposne.message[0];\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCart = (token, userId, product) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/update/quantity\"), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        method: \"PUT\",\n        body: JSON.stringify({\n          userId: userId,\n          productId: product.productId,\n          quantity: product.quantity,\n          total: product.total\n        })\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 201) {\n        dispatch({\n          type: UPDATE_CART,\n          item: product\n        });\n      }\n\n      return jsonResposne.message;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const clearCart = () => {\n  return dispatch => {\n    dispatch({\n      type: CLEAR_CART,\n      payload: null\n    });\n  };\n};","map":{"version":3,"sources":["/Users/rst_979/MonashBootCamp/bespoke_bbqs/src/store/actions/cartActions.js"],"names":["base_url","ADD_TO_CART","GET_CART_DETAILS","UPDATE_CART","CLEAR_CART","addToCart","token","cartItem","dispatch","response","fetch","headers","body","JSON","stringify","method","jsonResposne","json","status","type","error","console","log","getCartItems","userId","cartItems","message","updateCart","product","productId","quantity","total","item","clearCart","payload"],"mappings":"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","sourcesContent":["import { base_url } from \"../../constants\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const GET_CART_DETAILS = \"GET_CART_DETAILS\";\nexport const UPDATE_CART = \"UPDATE_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\n\nexport const addToCart = (token, cartItem) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${base_url}/cart/add`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        body: JSON.stringify(cartItem),\n        method: \"POST\"\n      });\n      const jsonResposne = await response.json();\n      if (response.status === 201) {\n        dispatch({\n          type: ADD_TO_CART,\n          cartItem: cartItem\n        });\n      }\n\n      return jsonResposne;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getCartItems = (token, userId) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${base_url}/cart/user/${userId}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        method: \"POST\"\n      });\n\n      const jsonResposne = await response.json();\n      if (response.status === 200) {\n        dispatch({\n          type: GET_CART_DETAILS,\n          cartItems: jsonResposne.message[0]\n        });\n      }\n\n      return jsonResposne.message[0];\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = (token, userId, product) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${base_url}/cart/update/quantity`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": token\n        },\n        method: \"PUT\",\n        body: JSON.stringify({\n          userId: userId,\n          productId: product.productId,\n          quantity: product.quantity,\n          total: product.total\n        })\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 201) {\n        dispatch({\n          type: UPDATE_CART,\n          item: product\n        });\n      }\n\n      return jsonResposne.message;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const clearCart = () => {\n  return dispatch => {\n    dispatch({\n      type: CLEAR_CART,\n      payload: null\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}