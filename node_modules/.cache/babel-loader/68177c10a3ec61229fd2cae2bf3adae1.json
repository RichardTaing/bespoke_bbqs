{"ast":null,"code":"import _defineProperty from \"/Users/rst_979/MonashBootCamp/bespoke_bbqs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/rst_979/MonashBootCamp/bespoke_bbqs/src/containers/PlaceOrder/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport \"./style.css\";\nimport NormalInput from \"../../components/UI/NormalInput\";\nimport * as authActions from \"../../store/actions/authActions\";\nimport { connect } from \"react-redux\";\nimport AddressForm from \"./AddressForm\";\nimport CartPrice from \"../../components/CartPrice\";\nimport DeliveryAddress from \"./DeliveryAddress\";\nimport RadioButton from \"../../components/UI/RadioButton\";\nimport * as cartActions from \"../../store/actions/cartActions\";\nimport { base_url } from \"../../constants\";\n\nclass PlaceOrder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addresses: [],\n      address: {\n        fullName: \"\",\n        mobileNumber: \"\",\n        pinCode: \"\",\n        locality: \"\",\n        address: \"\",\n        cityDistrictTown: \"\",\n        state: \"\",\n        landmark: \"\",\n        alternatePhoneNumber: \"\"\n      },\n      order: [],\n      selectedAddress: \"\",\n      existingAddress: false,\n      newAddress: false,\n      isAddressConfirm: false,\n      isOrderConfirm: false,\n      selectedPaymentType: \"cod\",\n      paymentTypes: [{\n        id: 1,\n        value: \"card\",\n        label: \"Credit Card / Debit Card / ATM Card\",\n        isActive: false\n      }, {\n        id: 2,\n        value: \"netBanking\",\n        label: \"Net Banking\",\n        isActive: false\n      }, {\n        id: 3,\n        value: \"paypal\",\n        label: \"Paypal\",\n        isActive: false\n      }, {\n        id: 4,\n        value: \"cod\",\n        label: \"Cash on Delivery\",\n        isActive: true\n      }]\n    };\n\n    this.getAddresses = () => {\n      const userId = this.props.auth.user.userId;\n      fetch(\"\".concat(base_url, \"/user/get-addresses/\") + userId, {\n        headers: {\n          \"auth-token\": this.props.auth.token\n        }\n      }).then(response => {\n        if (response.status == 200) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      }).then(jsonResponse => {\n        console.log(jsonResponse);\n        this.setState({\n          addresses: jsonResponse.message.address\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.inputHandler = e => {\n      const address = this.state.address;\n\n      const updatedAddress = _objectSpread({}, address, {\n        [e.target.name]: e.target.value\n      });\n\n      this.setState({\n        address: updatedAddress\n      });\n    };\n\n    this.addressSelector = e => {\n      this.setState({\n        selectedAddress: e.target.value,\n        existingAddress: true,\n        newAddress: false\n      });\n    };\n\n    this.newAddressSelection = e => {\n      this.setState({\n        selectedAddress: \"newAddressId\",\n        existingAddress: false,\n        newAddress: true\n      });\n    };\n\n    this.addressSubmitHandler = e => {\n      e.preventDefault();\n      console.log(this.state.address);\n      const address = {\n        userId: this.props.auth.user.userId,\n        address: this.state.address\n      };\n      fetch(\"\".concat(base_url, \"/user/new-address\"), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": this.props.auth.token\n        },\n        method: \"POST\",\n        body: JSON.stringify(address)\n      }).then(response => response.json()).then(jsonResponse => {\n        console.log(\"new address\");\n        console.log(jsonResponse);\n        console.log(\"new address\"); //this.getAddresses();\n        //console.log(jsonResponse.message);\n\n        const updatedAddressList = jsonResponse.message.address;\n        this.setState({\n          isAddressConfirm: true,\n          address: _objectSpread({}, this.state.address, {}, address.address),\n          addresses: updatedAddressList,\n          selectedAddress: updatedAddressList[updatedAddressList.length - 1]._id\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.confirmDeliveryAddress = () => {\n      this.setState({\n        isAddressConfirm: true\n      });\n    };\n\n    this.confirmOrder = () => {\n      this.setState({\n        isOrderConfirm: true\n      });\n    };\n\n    this.selectPaymentOption = e => {\n      this.setState({\n        selectedPaymentType: e.target.value\n      });\n    };\n\n    this.submitOrder = async () => {\n      if (!this.state.isOrderConfirm) {\n        return;\n      }\n\n      if (this.state.selectedPaymentType !== \"cod\") {\n        return;\n      }\n\n      const order = this.props.cart.cartItem.map(item => {\n        return {\n          product: item.product,\n          price: item.price,\n          quantity: item.quantity\n        };\n      });\n\n      try {\n        const response = await fetch(\"\".concat(base_url, \"/order/create\"), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"auth-token\": this.props.auth.token\n          },\n          body: JSON.stringify({\n            user: this.props.auth.user.userId,\n            address: this.state.selectedAddress,\n            order: order,\n            paymentType: \"COD\",\n            paymentStatus: \"pending\"\n          }),\n          method: \"POST\"\n        });\n        const jsonResponse = await response.json();\n\n        if (response.status === 201) {\n          this.props.clearCart();\n          this.props.history.push({\n            pathname: \"/thank-you\",\n            search: \"?orderid=\" + jsonResponse.message._id,\n            state: jsonResponse.message\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.auth.isAuthenticated) {\n      this.props.getToken().then(result => {\n        if (result) {\n          this.getAddresses();\n        } else {\n          this.props.history.push(\"/login\");\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      this.getAddresses();\n    }\n  }\n\n  render() {\n    let address;\n\n    if (this.state.isAddressConfirm && !this.state.newAddress) {\n      address = this.state.addresses.find(address => address._id === this.state.selectedAddress);\n    } else {\n      address = this.state.address;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PlaceOrderWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"DeliveryAddress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Login\", \" \", this.props.auth.isAuthenticated ? React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }) : null), React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Email: \", this.props.auth.user.email)), this.state.isAddressConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Delivery Address\", \" \", this.state.isAddressConfirm ? React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }) : null), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"\".concat(address.fullName, \" - \").concat(address.mobileNumber, \" - \")), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"\".concat(address.address, \", \").concat(address.cityDistrictTown, \", \").concat(address.state, \" - \").concat(address.pinCode)))) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Delivery Address\"), this.state.addresses.length && this.state.addresses.map(address => React.createElement(DeliveryAddress, {\n      key: address._id,\n      onAddressSelection: this.addressSelector,\n      value: this.state.selectedAddress,\n      address: address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })), this.state.existingAddress ? React.createElement(\"div\", {\n      className: \"DeliveryButtonContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.confirmDeliveryAddress,\n      className: \"DeliveryAddressButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Deliver Here\")) : null), React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(RadioButton, {\n      name: \"address\",\n      label: \"Add new Address\",\n      value: this.state.selectedAddress,\n      onChange: this.newAddressSelection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), this.state.newAddress ? React.createElement(AddressForm, {\n      address: this.state.address,\n      inputHandler: this.inputHandler,\n      addressSubmitHandler: this.addressSubmitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }) : null)), this.state.isOrderConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Order Summary \", React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), \" \")) : this.state.isAddressConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Order Summary \"), this.props.cart.cartItem.map(item => React.createElement(\"div\", {\n      key: item.product,\n      style: {\n        display: \"flex\",\n        margin: \"5px 0\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: \"60px\",\n        height: \"60px\",\n        overflow: \"hidden\",\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        maxWidth: \"100%\",\n        maxHeight: \"100%\",\n        position: \"absolute\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\"\n      },\n      src: item.image,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, item.name), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Quantity : \", item.quantity), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"$\", item.total)))), React.createElement(\"button\", {\n      onClick: this.confirmOrder,\n      className: \"ContinueButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Continue\")) : null, this.state.isOrderConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Payment Option\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, this.state.paymentTypes.map(payment => React.createElement(\"li\", {\n      className: \"paymentType\",\n      key: payment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(RadioButton, {\n      key: payment.id,\n      name: \"paymentType\",\n      label: payment.label,\n      value: payment.value,\n      onChange: this.selectPaymentOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })))), this.state.selectedPaymentType !== \"cod\" ? React.createElement(\"p\", {\n      className: \"ErrorMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Sorry, Only Cash on Delivery is available\") : null, React.createElement(\"button\", {\n      className: \"PaymentConfirm\",\n      onClick: this.submitOrder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Confirm Order\")) : null), React.createElement(CartPrice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getToken: () => dispatch(authActions.getToken()),\n    clearCart: () => dispatch(cartActions.clearCart())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceOrder);","map":{"version":3,"sources":["/Users/rst_979/MonashBootCamp/bespoke_bbqs/src/containers/PlaceOrder/index.js"],"names":["React","Component","Header","NormalInput","authActions","connect","AddressForm","CartPrice","DeliveryAddress","RadioButton","cartActions","base_url","PlaceOrder","state","addresses","address","fullName","mobileNumber","pinCode","locality","cityDistrictTown","landmark","alternatePhoneNumber","order","selectedAddress","existingAddress","newAddress","isAddressConfirm","isOrderConfirm","selectedPaymentType","paymentTypes","id","value","label","isActive","getAddresses","userId","props","auth","user","fetch","headers","token","then","response","status","json","Error","jsonResponse","console","log","setState","message","catch","error","inputHandler","e","updatedAddress","target","name","addressSelector","newAddressSelection","addressSubmitHandler","preventDefault","method","body","JSON","stringify","updatedAddressList","length","_id","confirmDeliveryAddress","confirmOrder","selectPaymentOption","submitOrder","cart","cartItem","map","item","product","price","quantity","paymentType","paymentStatus","clearCart","history","push","pathname","search","componentDidMount","isAuthenticated","getToken","result","render","find","email","display","margin","alignItems","width","height","overflow","position","maxWidth","maxHeight","left","transform","image","total","payment","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport \"./style.css\";\nimport NormalInput from \"../../components/UI/NormalInput\";\nimport * as authActions from \"../../store/actions/authActions\";\nimport { connect } from \"react-redux\";\nimport AddressForm from \"./AddressForm\";\nimport CartPrice from \"../../components/CartPrice\";\nimport DeliveryAddress from \"./DeliveryAddress\";\nimport RadioButton from \"../../components/UI/RadioButton\";\nimport * as cartActions from \"../../store/actions/cartActions\";\nimport { base_url } from \"../../constants\";\n\nclass PlaceOrder extends Component {\n  state = {\n    addresses: [],\n    address: {\n      fullName: \"\",\n      mobileNumber: \"\",\n      pinCode: \"\",\n      locality: \"\",\n      address: \"\",\n      cityDistrictTown: \"\",\n      state: \"\",\n      landmark: \"\",\n      alternatePhoneNumber: \"\"\n    },\n    order: [],\n    selectedAddress: \"\",\n    existingAddress: false,\n    newAddress: false,\n    isAddressConfirm: false,\n    isOrderConfirm: false,\n    selectedPaymentType: \"cod\",\n    paymentTypes: [\n      {\n        id: 1,\n        value: \"card\",\n        label: \"Credit Card / Debit Card / ATM Card\",\n        isActive: false\n      },\n      { id: 2, value: \"netBanking\", label: \"Net Banking\", isActive: false },\n      { id: 3, value: \"paypal\", label: \"Paypal\", isActive: false },\n      { id: 4, value: \"cod\", label: \"Cash on Delivery\", isActive: true }\n    ]\n  };\n\n  componentDidMount() {\n    if (!this.props.auth.isAuthenticated) {\n      this.props\n        .getToken()\n        .then(result => {\n          if (result) {\n            this.getAddresses();\n          } else {\n            this.props.history.push(\"/login\");\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      this.getAddresses();\n    }\n  }\n\n  getAddresses = () => {\n    const userId = this.props.auth.user.userId;\n    fetch(`${base_url}/user/get-addresses/` + userId, {\n      headers: {\n        \"auth-token\": this.props.auth.token\n      }\n    })\n      .then(response => {\n        if (response.status == 200) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      })\n      .then(jsonResponse => {\n        console.log(jsonResponse);\n        this.setState({\n          addresses: jsonResponse.message.address\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  inputHandler = e => {\n    const address = this.state.address;\n    const updatedAddress = {\n      ...address,\n      [e.target.name]: e.target.value\n    };\n    this.setState({\n      address: updatedAddress\n    });\n  };\n\n  addressSelector = e => {\n    this.setState({\n      selectedAddress: e.target.value,\n      existingAddress: true,\n      newAddress: false\n    });\n  };\n\n  newAddressSelection = e => {\n    this.setState({\n      selectedAddress: \"newAddressId\",\n      existingAddress: false,\n      newAddress: true\n    });\n  };\n\n  addressSubmitHandler = e => {\n    e.preventDefault();\n    console.log(this.state.address);\n\n    const address = {\n      userId: this.props.auth.user.userId,\n      address: this.state.address\n    };\n\n    fetch(`${base_url}/user/new-address`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": this.props.auth.token\n      },\n      method: \"POST\",\n      body: JSON.stringify(address)\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        console.log(\"new address\");\n        console.log(jsonResponse);\n        console.log(\"new address\");\n\n        //this.getAddresses();\n        //console.log(jsonResponse.message);\n        const updatedAddressList = jsonResponse.message.address;\n        this.setState({\n          isAddressConfirm: true,\n          address: {\n            ...this.state.address,\n            ...address.address\n          },\n          addresses: updatedAddressList,\n          selectedAddress: updatedAddressList[updatedAddressList.length - 1]._id\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  confirmDeliveryAddress = () => {\n    this.setState({\n      isAddressConfirm: true\n    });\n  };\n\n  confirmOrder = () => {\n    this.setState({\n      isOrderConfirm: true\n    });\n  };\n\n  selectPaymentOption = e => {\n    this.setState({\n      selectedPaymentType: e.target.value\n    });\n  };\n\n  submitOrder = async () => {\n    if (!this.state.isOrderConfirm) {\n      return;\n    }\n\n    if (this.state.selectedPaymentType !== \"cod\") {\n      return;\n    }\n\n    const order = this.props.cart.cartItem.map(item => {\n      return {\n        product: item.product,\n        price: item.price,\n        quantity: item.quantity\n      };\n    });\n\n    try {\n      const response = await fetch(`${base_url}/order/create`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": this.props.auth.token\n        },\n        body: JSON.stringify({\n          user: this.props.auth.user.userId,\n          address: this.state.selectedAddress,\n          order: order,\n          paymentType: \"COD\",\n          paymentStatus: \"pending\"\n        }),\n        method: \"POST\"\n      });\n\n      const jsonResponse = await response.json();\n      if (response.status === 201) {\n        this.props.clearCart();\n        this.props.history.push({\n          pathname: \"/thank-you\",\n          search: \"?orderid=\" + jsonResponse.message._id,\n          state: jsonResponse.message\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    let address;\n    if (this.state.isAddressConfirm && !this.state.newAddress) {\n      address = this.state.addresses.find(\n        address => address._id === this.state.selectedAddress\n      );\n    } else {\n      address = this.state.address;\n    }\n\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"Content\">\n          <div className=\"PlaceOrderWrapper\">\n            <div className=\"DeliveryAddress\">\n              <div className=\"Card\">\n                <p className=\"CardText\">\n                  Login{\" \"}\n                  {this.props.auth.isAuthenticated ? (\n                    <i className=\"fas fa-check\"></i>\n                  ) : null}\n                </p>\n                <p className=\"CardText\">Email: {this.props.auth.user.email}</p>\n              </div>\n\n              {this.state.isAddressConfirm ? (\n                <div className=\"Card\">\n                  <p className=\"CardText\">\n                    Delivery Address{\" \"}\n                    {this.state.isAddressConfirm ? (\n                      <i className=\"fas fa-check\"></i>\n                    ) : null}\n                  </p>\n                  <p>\n                    <span>{`${address.fullName} - ${address.mobileNumber} - `}</span>\n                    <span>{`${address.address}, ${address.cityDistrictTown}, ${address.state} - ${address.pinCode}`}</span>\n                  </p>\n                </div>\n              ) : (\n                <React.Fragment>\n                  <div className=\"Card\">\n                    <h4>Delivery Address</h4>\n                    {this.state.addresses.length &&\n                      this.state.addresses.map(address => (\n                        <DeliveryAddress\n                          key={address._id}\n                          onAddressSelection={this.addressSelector}\n                          value={this.state.selectedAddress}\n                          address={address}\n                        />\n                      ))}\n                    {this.state.existingAddress ? (\n                      <div className=\"DeliveryButtonContainer\">\n                        <button\n                          onClick={this.confirmDeliveryAddress}\n                          className=\"DeliveryAddressButton\"\n                        >\n                          Deliver Here\n                        </button>\n                      </div>\n                    ) : null}\n                  </div>\n                  <div className=\"Card\">\n                    <div>\n                      <RadioButton\n                        name=\"address\"\n                        label=\"Add new Address\"\n                        value={this.state.selectedAddress}\n                        onChange={this.newAddressSelection}\n                      />\n                    </div>\n                    {this.state.newAddress ? (\n                      <AddressForm\n                        address={this.state.address}\n                        inputHandler={this.inputHandler}\n                        addressSubmitHandler={this.addressSubmitHandler}\n                      />\n                    ) : null}\n                  </div>\n                </React.Fragment>\n              )}\n\n              {this.state.isOrderConfirm ? (\n                <div className=\"Card\">\n                  <p className=\"CardText\">\n                    Order Summary <i className=\"fas fa-check\"></i>{\" \"}\n                  </p>\n                </div>\n              ) : this.state.isAddressConfirm ? (\n                <div className=\"Card\">\n                  <h4 className=\"CardText\">Order Summary </h4>\n                  {this.props.cart.cartItem.map(item => (\n                    <div\n                      key={item.product}\n                      style={{\n                        display: \"flex\",\n                        margin: \"5px 0\",\n                        alignItems: \"center\"\n                      }}\n                    >\n                      <div\n                        style={{\n                          width: \"60px\",\n                          height: \"60px\",\n                          overflow: \"hidden\",\n                          position: \"relative\"\n                        }}\n                      >\n                        <img\n                          style={{\n                            maxWidth: \"100%\",\n                            maxHeight: \"100%\",\n                            position: \"absolute\",\n                            left: \"50%\",\n                            transform: \"translateX(-50%)\"\n                          }}\n                          src={item.image}\n                          alt=\"\"\n                        />\n                      </div>\n                      <div>\n                        <h5>{item.name}</h5>\n                        <h6>Quantity : {item.quantity}</h6>\n                        <h6>${item.total}</h6>\n                      </div>\n                    </div>\n                  ))}\n                  <button\n                    onClick={this.confirmOrder}\n                    className=\"ContinueButton\"\n                  >\n                    Continue\n                  </button>\n                </div>\n              ) : null}\n\n              {this.state.isOrderConfirm ? (\n                <div className=\"Card\">\n                  <h4 className=\"CardText\">Payment Option</h4>\n                  <ul>\n                    {this.state.paymentTypes.map(payment => (\n                      <li className=\"paymentType\" key={payment.id}>\n                        <RadioButton\n                          key={payment.id}\n                          name=\"paymentType\"\n                          label={payment.label}\n                          value={payment.value}\n                          onChange={this.selectPaymentOption}\n                        />\n                      </li>\n                    ))}\n                  </ul>\n                  {this.state.selectedPaymentType !== \"cod\" ? (\n                    <p className=\"ErrorMessage\">\n                      Sorry, Only Cash on Delivery is available\n                    </p>\n                  ) : null}\n                  <button className=\"PaymentConfirm\" onClick={this.submitOrder}>\n                    Confirm Order\n                  </button>\n                </div>\n              ) : null}\n            </div>\n\n            <CartPrice />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getToken: () => dispatch(authActions.getToken()),\n    clearCart: () => dispatch(cartActions.clearCart())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceOrder);\n"]},"metadata":{},"sourceType":"module"}